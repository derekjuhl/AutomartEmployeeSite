//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;

public partial class AutomartEntities : DbContext
{
    public AutomartEntities()
        : base("name=AutomartEntities")
    {
    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual int usp_AddNewVehicle(string lastname, string firstName, string license, string vehicleMake, string vehicleYear)
    {
        var lastnameParameter = lastname != null ?
            new ObjectParameter("lastname", lastname) :
            new ObjectParameter("lastname", typeof(string));

        var firstNameParameter = firstName != null ?
            new ObjectParameter("FirstName", firstName) :
            new ObjectParameter("FirstName", typeof(string));

        var licenseParameter = license != null ?
            new ObjectParameter("License", license) :
            new ObjectParameter("License", typeof(string));

        var vehicleMakeParameter = vehicleMake != null ?
            new ObjectParameter("VehicleMake", vehicleMake) :
            new ObjectParameter("VehicleMake", typeof(string));

        var vehicleYearParameter = vehicleYear != null ?
            new ObjectParameter("vehicleYear", vehicleYear) :
            new ObjectParameter("vehicleYear", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddNewVehicle", lastnameParameter, firstNameParameter, licenseParameter, vehicleMakeParameter, vehicleYearParameter);
    }

    public virtual int usp_AddServiceDetails(Nullable<int> autoServiceID, Nullable<decimal> discountPercent, string serviceNotes)
    {
        var autoServiceIDParameter = autoServiceID.HasValue ?
            new ObjectParameter("AutoServiceID", autoServiceID) :
            new ObjectParameter("AutoServiceID", typeof(int));

        var discountPercentParameter = discountPercent.HasValue ?
            new ObjectParameter("DiscountPercent", discountPercent) :
            new ObjectParameter("DiscountPercent", typeof(decimal));

        var serviceNotesParameter = serviceNotes != null ?
            new ObjectParameter("ServiceNotes", serviceNotes) :
            new ObjectParameter("ServiceNotes", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddServiceDetails", autoServiceIDParameter, discountPercentParameter, serviceNotesParameter);
    }

    public virtual int usp_AddVehicleService(Nullable<int> vehicleID, Nullable<int> locationID)
    {
        var vehicleIDParameter = vehicleID.HasValue ?
            new ObjectParameter("vehicleID", vehicleID) :
            new ObjectParameter("vehicleID", typeof(int));

        var locationIDParameter = locationID.HasValue ?
            new ObjectParameter("LocationID", locationID) :
            new ObjectParameter("LocationID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddVehicleService", vehicleIDParameter, locationIDParameter);
    }

    public virtual ObjectResult<usp_GetVehicleandCustomerInfo_Result> usp_GetVehicleandCustomerInfo(string license)
    {
        var licenseParameter = license != null ?
            new ObjectParameter("License", license) :
            new ObjectParameter("License", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVehicleandCustomerInfo_Result>("usp_GetVehicleandCustomerInfo", licenseParameter);
    }

    public virtual ObjectResult<usp_ServiceDetails_Result> usp_ServiceDetails(Nullable<int> vehicleServiceID)
    {
        var vehicleServiceIDParameter = vehicleServiceID.HasValue ?
            new ObjectParameter("VehicleServiceID", vehicleServiceID) :
            new ObjectParameter("VehicleServiceID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ServiceDetails_Result>("usp_ServiceDetails", vehicleServiceIDParameter);
    }

    public virtual ObjectResult<usp_Services_Result> usp_Services(Nullable<int> vehicleID)
    {
        var vehicleIDParameter = vehicleID.HasValue ?
            new ObjectParameter("VehicleID", vehicleID) :
            new ObjectParameter("VehicleID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Services_Result>("usp_Services", vehicleIDParameter);
    }
}
